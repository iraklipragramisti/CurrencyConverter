{"version":3,"sources":["CurrencyRow.js","App.js","reportWebVitals.js","index.js"],"names":["CurrencyRow","props","currencyOptions","selectedCurrency","onChangeCurrency","onChangeAmount","amount","type","className","value","onChange","map","option","URL","App","toAmount","fromAmount","useState","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","setAmount","amountInFromCurrency","setAmountInFromCurrency","useEffect","fetch","then","response","json","data","firstCurrency","Object","keys","rates","base","res","style","backgroundImage","opacity","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAsBeA,EApBK,SAACC,GAAW,IAE5BC,EAKED,EALFC,gBACAC,EAIEF,EAJFE,iBACAC,EAGEH,EAHFG,iBACAC,EAEEJ,EAFFI,eACAC,EACEL,EADFK,OAGF,OACE,gCACE,uBAAOC,KAAK,SAASC,UAAU,kDAAkDC,MAAOH,EAAQI,SAAUL,IAC1G,wBAAQG,UAAU,6BAA6BC,MAAON,EAAkBO,SAAUN,EAAlF,SACGF,EAAgBS,KAAI,SAAAC,GAAM,OAC3B,wBAAqBH,MAAOG,EAA5B,SAAqCA,GAAxBA,YCZfC,EAAM,yCAyEGC,MAvEf,WAAgB,IAQVC,EAAUC,EARD,EACiCC,mBAAS,IAD1C,mBACNf,EADM,KACWgB,EADX,OAE2BD,qBAF3B,mBAENE,EAFM,KAEQC,EAFR,OAGuBH,qBAHvB,mBAGNI,EAHM,KAGMC,EAHN,OAI2BL,qBAJ3B,mBAINM,EAJM,KAIQC,EAJR,OAKeP,mBAAS,GALxB,mBAKNX,EALM,KAKEmB,EALF,OAM2CR,oBAAS,GANpD,mBAMNS,EANM,KAMgBC,EANhB,KAiDb,OAxCID,GACFV,EAAaV,EACbS,EAAWT,EAASiB,IAGpBR,EAAWT,EACXU,EAAaV,EAASiB,GAGxBK,qBAAU,WACRC,MAAMhB,GACHiB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAO,GAC9CnB,EAAmB,CAACe,EAAKK,MAAP,mBAAgBH,OAAOC,KAAKH,EAAKI,UACnDjB,EAAgBa,EAAKK,MACrBhB,EAAcY,GACdV,EAAgBS,EAAKI,MAAMH,SAE9B,IAEHN,qBAAU,WACY,MAAhBT,GAAsC,MAAdE,GAC1BQ,MAAM,GAAD,OAAIhB,EAAJ,iBAAgBM,EAAhB,oBAAwCE,IAC1CS,MAAK,SAAAS,GAAG,OAAIA,EAAIP,UAChBF,MAAK,SAAAG,GAAI,OAAIT,EAAgBS,EAAKI,MAAMhB,SAE5C,CAACF,EAAcE,IAchB,sBAAKb,UAAU,6DAA6DgC,MAAO,CAACC,gBAAgB,sDAAuDC,QAAQ,OAAnK,UACE,oBAAIlC,UAAU,iEAAd,qBACA,cAAC,EAAD,CACEN,gBAAiBA,EACjBC,iBAAkBgB,EAClBf,iBAAkB,SAAAuC,GAAC,OAAIvB,EAAgBuB,EAAEC,OAAOnC,QAChDJ,eAjByB,SAACsC,GAC9BlB,EAAUkB,EAAEC,OAAOnC,OACnBkB,GAAwB,IAgBpBrB,OAAQU,IAEV,qBAAKR,UAAU,kEAAf,eACA,cAAC,EAAD,CACEN,gBAAiBA,EACjBC,iBAAkBkB,EAClBjB,iBAAkB,SAAAuC,GAAC,OAAIrB,EAAcqB,EAAEC,OAAOnC,QAC9CJ,eApBuB,SAACsC,GAC5BlB,EAAUkB,EAAEC,OAAOnC,OACnBkB,GAAwB,IAmBpBrB,OAAQS,QC3DD8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6ad8a70d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst CurrencyRow = (props) => {\r\n  const {\r\n    currencyOptions,\r\n    selectedCurrency,\r\n    onChangeCurrency,\r\n    onChangeAmount,\r\n    amount\r\n  } = props\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"number\" className=\"border-2 border-black rounded-lg p-1 font-serif\" value={amount} onChange={onChangeAmount}/>\r\n      <select className=\"m-2 border border-gray-400\" value={selectedCurrency} onChange={onChangeCurrency}>\r\n        {currencyOptions.map(option => (\r\n        <option key={option} value={option}>{option}</option>))}\r\n      </select>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CurrencyRow\r\n","import CurrencyRow from \"./CurrencyRow\"\nimport { useEffect, useState } from 'react'\n\n\nconst URL = 'https://api.exchangeratesapi.io/latest'\n\nfunction App() {\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [fromCurrency, setFromCurrency] = useState()\n  const [toCurrency, setToCurrency] = useState()\n  const [exchangeRate, setExchangeRate] = useState()\n  const [amount, setAmount] = useState(1)\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true)\n\n  let toAmount, fromAmount\n  if (amountInFromCurrency) {\n    fromAmount = amount\n    toAmount = amount * exchangeRate\n  }\n  else {\n    toAmount = amount\n    fromAmount = amount / exchangeRate\n  }\n\n  useEffect(() => {\n    fetch(URL)\n      .then(response => response.json())\n      .then(data => {\n        const firstCurrency = Object.keys(data.rates)[0]\n        setCurrencyOptions([data.base, ...Object.keys(data.rates)])\n        setFromCurrency(data.base)\n        setToCurrency(firstCurrency)\n        setExchangeRate(data.rates[firstCurrency])\n      })\n  }, [])\n\n  useEffect(() => {\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n        .then(res => res.json())\n        .then(data => setExchangeRate(data.rates[toCurrency]))\n    }\n  }, [fromCurrency, toCurrency])\n\n\n  const handleFromAmountChange = (e) => {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(true)\n  }\n\n  const handleToAmountChange = (e) => {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(false)\n  }\n\n  return (\n    <div className=\"m-0 p-0 flex h-screen justify-center items-center flex-col\" style={{backgroundImage:\"url('https://wallpaperaccess.com/full/2655649.jpg')\", opacity:'80%'}}>\n      <h1 className=\"text-black m-4 text-5xl font-bold -mt-32 text-white font-serif\">Convert</h1>\n      <CurrencyRow\n        currencyOptions={currencyOptions}\n        selectedCurrency={fromCurrency}\n        onChangeCurrency={e => setFromCurrency(e.target.value)}\n        onChangeAmount={handleFromAmountChange}\n        amount={fromAmount}\n      />\n      <div className=\"text-3xl pr-12 pb-2 text-center font-bold text-white font-serif\">=</div>\n      <CurrencyRow\n        currencyOptions={currencyOptions}\n        selectedCurrency={toCurrency}\n        onChangeCurrency={e => setToCurrency(e.target.value)}\n        onChangeAmount={handleToAmountChange}\n        amount={toAmount}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}